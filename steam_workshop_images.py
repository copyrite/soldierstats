import argparse
from textwrap import dedent

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

from soldier import Soldier, LWOTCSoldier, ActuallyNCESoldier

COLORS = plt.rcParams["axes.prop_cycle"].by_key()["color"]
EXPLAINER = {
    "edgecolor": "black",
    "facecolor": "lightgray",
    "linewidth": 0.75,
    "alpha": 0.5,
}
IMG_FILE_PREFIX = "SteamWorkshop_"

if __name__ == "__main__":
    parser = argparse.ArgumentParser("python steam_workshop_images.py")
    parser.add_argument(
        "-n",
        "--number",
        type=int,
        help="Number of soldiers to generate per sample",
    )
    args = parser.parse_args()

    plt.rcParams["legend.fancybox"] = False
    plt.rcParams["legend.framealpha"] = EXPLAINER["alpha"]
    plt.rcParams["legend.facecolor"] = EXPLAINER["facecolor"]
    plt.rcParams["legend.edgecolor"] = EXPLAINER["edgecolor"]
    stat_figs = {}
    stat_axes = {}

    # Create figures/axes
    for stat, range_ in Soldier.STATS.items():
        fig, ax = plt.subplots()
        stat_figs[stat], stat_axes[stat] = fig, ax

    totals_fig, totals_ax = plt.subplots()

    for sample_index, factory in enumerate((LWOTCSoldier, ActuallyNCESoldier)):
        # Put sample in a matrix
        sample = np.zeros([args.number, len(Soldier.STATS)], dtype=np.int16)
        totals = np.zeros([args.number], dtype=np.int16)
        default_total = Soldier().weighed_stat_total()
        for i in range(args.number):
            sol = factory()
            sample[i, :] = [getattr(sol, stat).current for stat in Soldier.STATS]
            totals[i] = sol.weighed_stat_total() - default_total

        # The 7 stat charts
        for stat_index, (stat, range_) in enumerate(Soldier.STATS.items()):
            values = range(
                range_.default + range_.min_delta, range_.default + range_.max_delta + 1
            )
            stat_axes[stat].bar(
                x=[value - 0.75 / 4 + sample_index * 0.75 / 2 for value in values],
                width=0.75 / 2,
                height=[(sample[:, stat_index] == value).sum() for value in values],
                color=COLORS[sample_index],
                edgecolor="black",
                linewidth=0.75,
            )

        # Weighed Stat Total chart
        if factory == ActuallyNCESoldier:
            totals_ax.hist(
                totals,
                color=COLORS[1],
                edgecolor="black",
                linewidth=0.75,
            )

    # Edit axes, save figs
    for stat in Soldier.STATS:
        ax = stat_axes[stat]
        ax.set_title(f"{stat} (n = {args.number})")
        ax.yaxis.set_major_formatter(mtick.PercentFormatter(args.number))
        legend = ax.legend(["Base LWOTC", "Actually NCE"])
        legend.get_frame().set_edgecolor(EXPLAINER["edgecolor"])
        legend.get_frame().set_linewidth(EXPLAINER["linewidth"])

        stat_figs[stat].savefig(f"{IMG_FILE_PREFIX}{stat}.png")

    totals_ax.set_title(f"Weighed Stat Totals (n = {args.number})")
    totals_ax.yaxis.set_major_formatter(mtick.PercentFormatter(args.number))
    totals_ax.set_ylim([0, totals_ax.get_ylim()[1] * 1.35])
    totals_ax.text(
        0.5,
        0.96,
        dedent(
            """
            The relative quality of soldiers generated by this mod,
            in terms of how LWOTC's swap table values stats.
            This is zero for all unmodded LWOTC soldiers.
            Offense is worth 3, Mobility and HP are worth 12,
            everything else is 1.
            """
        ).strip(),
        transform=ax.transAxes,
        verticalalignment="top",
        horizontalalignment="center",
        bbox=EXPLAINER,
    )
    totals_fig.savefig(f"{IMG_FILE_PREFIX}Totals.png")
